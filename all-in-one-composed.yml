version: '3.7'
services:

  consul:
    image: consul
    ports:
     - '8500:8500'

  # PostgreSQL for storage
  postgresql:
    hostname: postgresql
    image: postgres:9
    ports:
     - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=transporterservice

  # Postgres web client
  pgadmin:
    image: thajeztah/pgadmin4
    ports:
     - '89:5050'

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    environment:
#      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
#      KAFKA_CREATE_TOPICS: >-
#        traffic-mission-control.event-log:5:3,
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092, OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://:9092, OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_PORT: 9092
      JMX_PORT: 9997
      #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka2:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092
      KAFKA_LISTENERS: INSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_PORT: 9092
      JMX_PORT: 9997
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka3:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092
      KAFKA_LISTENERS: INSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_PORT: 9092
      JMX_PORT: 9997
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  registrator:
    image: gliderlabs/registrator
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    command: "-ip localhost consul://consul:8500"
    depends_on:
      - consul

  kafka-manager:
    image: rafabsb/kafka-manager-docker:2.4
    ports:
      - "9000:9000"
    links:
      - zookeeper
      - kafka
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true

  elasticsearch:
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.0.1
    environment:
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - discovery.type=single-node
#      - http.host=0.0.0.0
      - transport.tcp.port=9300
      - transport.host=0.0.0.0
      - transport.publish_port=9300
      - SERVICE_9300_NAME=core-elasticsearch
#      - SERVICE_9200_NAME=core-elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '9300:9300'
#      - '9200:9200'

  mongodb:
    hostname: mongodb
   image: mongo:3.4
    ports:
      - '27017:27017'

  fleet:
    image: cabonline/fleet
    ports:
      - '8090:8090'
    depends_on:
      - consul
      - kafka
      - mongodb
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#      SPRING_PROFILES_ACTIVE: mock, docker-compose-all
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED: "false"
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: fleet-service
      SPRING_DATA_ELASTICSEARCH_CLUSTER-NODES: elasticsearch:9300
      SPRING_DATA_ELASTICSEARCH_CLUSTER-NAME: elasticsearch

  fleet-transporter:
    image: cabonline/fleet-transporter
    ports:
      - '8484:8484'
    depends_on:
      - consul
      - kafka
      - postgresql
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#      SPRING_PROFILES_ACTIVE: mock, docker-compose-all
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_SERVICE_REGISTRY_AUTO_REGISTRATION_ENABLED: "false"
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql/transporterservice

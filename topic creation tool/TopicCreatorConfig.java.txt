@Configuration
public class TopicCreatorConfig {

//**
application.properties
topic-defs:
  fleet: '8:3'
  attribute-id-mapping-updates: '8:3'

**//

    private PartitionDef attributeIdMappingTopicDef;
    private PartitionDef fleetTopicDef;

    public TopicCreatorConfig(
            @Value("${topic-defs.fleet}") String fleetTopicPartitions,
            @Value("${topic-defs.attribute-id-mapping-updates}") String atrIdMappingsUpdatesTopicPartitions) {
        this.attributeIdMappingTopicDef = PartitionDef.parse(atrIdMappingsUpdatesTopicPartitions);
        this.fleetTopicDef = PartitionDef.parse(fleetTopicPartitions);
    }

    @Bean
    public NewTopic fleetTopic() {
        return new NewTopic(FleetService.FLEET_TOPIC, fleetTopicDef.numPartitions, fleetTopicDef.replicationFactor);
    }

    @Bean
    public NewTopic atrIdMappingsUpdatesTopic() {
        return new NewTopic(AttributeIdMappingService.ATTRIBUTE_ID_MAPPING_EVENTS_TOPIC,
                attributeIdMappingTopicDef.numPartitions, attributeIdMappingTopicDef.replicationFactor)
                .configs(Map.of(RETENTION_MS_CONFIG, "-1", RETENTION_BYTES_CONFIG, "-1"));
    }

    private static class PartitionDef {

        private final static Pattern PATTERN = Pattern.compile("(\\d+):(\\d+)");

        private int numPartitions;
        private short replicationFactor;

        private PartitionDef(int numPartitions, short replicationFactor) {
            this.numPartitions = numPartitions;
            this.replicationFactor = replicationFactor;
        }

        public static PartitionDef parse(String value) {
            var matcher = PATTERN.matcher(value);
            if (matcher.matches()) {
                var numParts = Integer.parseInt(matcher.group(1));
                var repFactor = Short.parseShort(matcher.group(2));
                return new PartitionDef(numParts, repFactor);
            } else {
                throw new IllegalArgumentException("Invalid topic partition definition: " + value);
            }
        }
    }
}